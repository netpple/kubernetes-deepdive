# -*- mode: ruby -*-
# vi: set ft=ruby :

BOX_IMAGE = "bento/ubuntu-18.04"
K8S_VERSION = "1.19.16-00"
DOCKER_VERSION = "5:19.03.15~3-0~ubuntu-bionic"

Vagrant.configure("2") do |config|
  config.vm.provider :virtualbox do |v|
    v.memory = 2048
    v.cpus = 2
  end

  config.vm.provision :shell, privileged: true, env: {"DOCKER_VERSION"=>DOCKER_VERSION,"K8S_VERSION"=>K8S_VERSION},  inline: $install_common_tools

  config.vm.define "control-plane" do |master|
    master.vm.box = BOX_IMAGE
    master.vm.hostname = "control-plane"
    master.vm.network :private_network, ip: "192.168.100.2"
    master.vm.provision :shell, privileged: false, inline: $provision_master_node
  end

  %w{worker-node1 worker-node2}.each_with_index do |name, i|
    config.vm.define name do |worker|
      worker.vm.box = BOX_IMAGE
      worker.vm.hostname = name
      worker.vm.network :private_network, ip: "192.168.100.#{i + 3}"
      worker.vm.provision :shell, privileged: false, inline: <<-SHELL
sudo /vagrant/join.sh
echo 'Environment="KUBELET_EXTRA_ARGS=--node-ip=192.168.100.#{i + 3}"' | sudo tee -a /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
sudo systemctl daemon-reload
sudo systemctl restart kubelet
SHELL
    end
  end

end


# privileged: true (root)
$install_common_tools = <<-SCRIPT
## disable swap
swapoff -a
sed -i '/swap/d' /etc/fstab

## Install kubeadm, kubectl and kubelet
### apt-get noninteractive
export DEBIAN_FRONTEND=noninteractive
###  -qq : really quiet (except errors)
apt-get -qq update
###  pre-requisite - docker install
apt-get -qq install apt-transport-https ca-certificates curl gnupg-agent software-properties-common &&
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - &&
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" &&
apt-get update &&
apt-get -y install docker-ce=${DOCKER_VERSION} docker-ce-cli=${DOCKER_VERSION} containerd.io
cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF
systemctl restart docker
### install kubernetes
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list
apt-get -qq update
#### K8S_VERSION from config.vm.provision env
apt-get -qq install -y kubelet=${K8S_VERSION} kubeadm=${K8S_VERSION} kubectl=${K8S_VERSION}
apt-mark hold kubelet kubeadm kubectl
#### ip of this box for kubelet
IP_ADDR=`ifconfig eth1 | grep netmask | awk '{print $2}'`
#### set node-ip to kubelet
echo "KUBELET_EXTRA_ARGS=--node-ip=\"$IP_ADDR\"" | tee /etc/default/kubelet
systemctl restart kubelet
SCRIPT

# privileged: false (vagrant)
$provision_master_node = <<-SHELL
OUTPUT_FILE=/vagrant/join.sh
rm -rf $OUTPUT_FILE

# Start cluster
sudo kubeadm init --apiserver-advertise-address=192.168.100.2 --apiserver-cert-extra-sans=192.168.100.2 --pod-network-cidr=10.224.0.0/16 --service-cidr=10.225.0.0/16 --node-name=control-plane | grep -A1 "kubeadm join" > ${OUTPUT_FILE}
chmod +x $OUTPUT_FILE

# Configure kubectl
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Configure flannel
wget -O kube-flannel.yml https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
sed -i.bak 's/10.244.0.0/10.224.0.0/g' kube-flannel.yml
sed -i.bak '/- --kube-subnet-mgr/a \\\ \\\ \\\ \\\ \\\ \\\ \\\ \\\ - --iface=eth1' kube-flannel.yml
kubectl create -f kube-flannel.yml

sudo systemctl daemon-reload
sudo systemctl restart kubelet
SHELL
